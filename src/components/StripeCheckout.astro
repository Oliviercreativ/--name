---
interface Props {
    planName: string;
    price: number;
    features: string[];
    buttonText?: string;
    priceId: string;
}

const { 
    planName, 
    price, 
    features,
    buttonText = "Proc√©der au paiement",
    priceId
} = Astro.props;
---

<div class="stripe-checkout-container">
    <!-- En-t√™te du paiement -->
    <div class="bg-white rounded-xl p-6 shadow-sm mb-6">
        <div class="text-center mb-6">
            <h3 class="text-2xl font-bold text-gray-900 mb-2">{planName}</h3>
            <div class="text-4xl font-bold text-zest-500 mb-2">{price}‚Ç¨</div>
            <p class="text-gray-600">Paiement unique, pas d'abonnement</p>
        </div>

        <!-- Liste des fonctionnalit√©s -->
        <ul class="space-y-3 mb-6">
            {features.map((feature) => (
                <li class="flex items-center space-x-3">
                    <div class="w-5 h-5 bg-green-100 rounded-full flex items-center justify-center">
                        <span class="text-green-600 text-xs font-bold">‚úì</span>
                    </div>
                    <span class="text-gray-600">{feature}</span>
                </li>
            ))}
        </ul>

        <!-- Message d'erreur -->
        <div id="error-message" class="hidden mb-4 p-4 bg-red-50 text-red-600 rounded-lg text-sm"></div>

        <!-- Bouton de paiement -->
        <button 
            id="checkout-button"
            class="w-full bg-zest-500 hover:bg-zest-600 text-white font-semibold py-4 px-6 rounded-xl text-lg transition-all transform hover:scale-105 shadow-lg flex items-center justify-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed"
        >
            <span>{buttonText}</span>
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3" />
            </svg>
        </button>

        <!-- Indicateur de s√©curit√© -->
        <div class="mt-4 flex items-center justify-center space-x-2 text-sm text-gray-500">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
            </svg>
            <span>Paiement s√©curis√© par Stripe</span>
        </div>
    </div>

    <!-- Garanties et s√©curit√© -->
    <div class="bg-gray-50 rounded-xl p-6">
        <div class="flex items-center space-x-4 mb-4">
            <div class="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
                <span class="text-green-600 text-xl">üõ°Ô∏è</span>
            </div>
            <div>
                <h4 class="font-semibold text-gray-900">Paiement 100% s√©curis√©</h4>
                <p class="text-sm text-gray-600">Vos donn√©es sont prot√©g√©es par Stripe</p>
            </div>
        </div>
        <div class="flex items-center space-x-4">
            <div class="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                <span class="text-blue-600 text-xl">‚úì</span>
            </div>
            <div>
                <h4 class="font-semibold text-gray-900">Garantie satisfait ou rembours√©</h4>
                <p class="text-sm text-gray-600">30 jours pour changer d'avis</p>
            </div>
        </div>
    </div>
</div>

<style>
    .stripe-checkout-container {
        max-width: 500px;
        margin: 0 auto;
    }

    /* Animation du bouton */
    #checkout-button {
        position: relative;
        overflow: hidden;
    }

    #checkout-button::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 5px;
        height: 5px;
        background: rgba(255, 255, 255, 0.5);
        opacity: 0;
        border-radius: 100%;
        transform: scale(1, 1) translate(-50%);
        transform-origin: 50% 50%;
    }

    #checkout-button:focus:not(:active)::after {
        animation: ripple 1s ease-out;
    }

    @keyframes ripple {
        0% {
            transform: scale(0, 0);
            opacity: 0.5;
        }
        100% {
            transform: scale(20, 20);
            opacity: 0;
        }
    }

    /* Animation de chargement */
    .loading-spinner {
        animation: spin 1s linear infinite;
    }

    @keyframes spin {
        from {
            transform: rotate(0deg);
        }
        to {
            transform: rotate(360deg);
        }
    }
</style>

<script type="module" define:vars={{ priceId, buttonText }}>
    // V√©rification de la cl√© Stripe
    const stripeKey = import.meta.env.PUBLIC_STRIPE_PUBLISHABLE_KEY;
    if (!stripeKey) {
        console.error('La cl√© publique Stripe n\'est pas configur√©e');
        showError('Configuration manquante. Veuillez contacter le support.');
        return;
    }

    // Chargement de Stripe.js
    const stripe = Stripe(stripeKey);
    const button = document.getElementById('checkout-button');
    const errorMessage = document.getElementById('error-message');

    // Fonction pour afficher les erreurs
    function showError(message) {
        console.error('Erreur Stripe:', message);
        if (errorMessage) {
            errorMessage.textContent = message;
            errorMessage.classList.remove('hidden');
            setTimeout(() => {
                errorMessage.classList.add('hidden');
            }, 5000);
        }
    }

    // Fonction pour mettre √† jour l'√©tat du bouton
    function updateButtonState(isLoading) {
        if (button) {
            button.disabled = isLoading;
            if (isLoading) {
                button.innerHTML = `
                    <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Traitement en cours...
                `;
            } else {
                button.innerHTML = `
                    <span>${buttonText}</span>
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3" />
                    </svg>
                `;
            }
        }
    }

    // Gestion du clic sur le bouton
    button?.addEventListener('click', async (e) => {
        e.preventDefault();
        updateButtonState(true);

        try {
            console.log('D√©marrage du processus de paiement...');
            console.log('PriceId:', priceId);

            // Appel √† notre API
            const response = await fetch('/api/create-checkout-session', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    priceId: priceId,
                }),
            });

            console.log('R√©ponse API:', response.status);

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Erreur lors de la cr√©ation de la session de paiement');
            }

            const { sessionId } = await response.json();
            console.log('SessionId re√ßu:', sessionId);

            // Redirection vers la page de paiement Stripe
            const result = await stripe.redirectToCheckout({
                sessionId,
            });

            if (result.error) {
                throw new Error(result.error.message);
            }
        } catch (error) {
            console.error('Erreur d√©taill√©e:', error);
            showError(error.message || 'Une erreur est survenue. Veuillez r√©essayer.');
            updateButtonState(false);
        }
    });
</script> 